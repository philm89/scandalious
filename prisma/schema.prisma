datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String              @id @default(cuid()) @map("_id")
  email             String              @unique
  role              Role                @default(STUDENT)
  firstName         String              
  lastName          String              
  groupName         GroupName           @default(GROUPA)
  description       String?
  vendorName        String?
  balance           Int 
  authToken         String                

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  orders            Orders[]
  menuItems         MenuItems[]         @relation("MenuItems")
}


model Orders {
  id                String              @id @default(cuid()) @map("_id")
  orderStatus       OrderStatus         
  statusChangeDate  DateTime

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            String
  orderItems        MenuItems[]         @relation("Orders")
}

model MenuItems {
  id                String              @id @default(cuid()) @map("_id")
  name              String      
  price             Int
  quantity          Int?
  description       String?

  dailyLimit        Int                 @default(0)
  promoted          Boolean             @default(false)

  displayOrder      Int                 
  menuItemType      MenuItemType
  order             Orders              @relation("Orders", fields: [orderId], references: [id])
  orderId           String
  vendorName        User                @relation("MenuItems", fields: [vendorNameId], references: [id])
  vendorNameId      String
}

enum Role {
  STUDENT
  VENDOR
  PARENT
  SCHOOLADMIN
  SUPERADMIN
}

enum MenuItemType {
  MAINITEM
  SUBITEM
}

enum OrderStatus {
  NOTSUBMITTED
  SUBMITTED
  PREPARED
  COMPLETED
}

enum GroupName {
  GROUPA
  GROUPB
}
